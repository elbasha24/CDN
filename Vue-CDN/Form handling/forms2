 Certainly! Here are five examples of form handling in Vue.js 3 using the template syntax (single file components), including the CDN link for Vue 3. Each example includes all necessary HTML and JavaScript code within a single block.

CDN Link for Vue 3:
```html
<script src="https://unpkg.com/vue@next"></script>
```
Example 1: Simple text input binding
```html
<div id="form-example-1">
  <input type="text" v-model="message" placeholder="Type your message here..." />
  <p>{{ message }}</p>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      message: '',
    };
  },
}).mount('#form-example-1');
</script>
```
Example 2: Checkbox binding
```html
<div id="form-example-2">
  <label>
    <input type="checkbox" v-model="checked" />
    Is checked?
  </label>
  <p>Checked: {{ checked }}</p>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      checked: false,
    };
  },
}).mount('#form-example-2');
</script>
```
Example 3: Radio button group binding
```html
<div id="form-example-3">
  <label>
    <input type="radio" value="optionA" v-model="selectedOption" name="options" />
    Option A
  </label>
  <label>
    <input type="radio" value="optionB" v-model="selectedOption" name="options" />
    Option B
  </label>
  <label>
    <input type="radio" value="optionC" v-model="selectedOption" name="options" />
    Option C
  </label>
  <p>Selected option: {{ selectedOption }}</p>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      selectedOption: 'optionA',
    };
  },
}).mount('#form-example-3');
</script>
```
Example 4: Select dropdown binding
```html
<div id="form-example-4">
  <select v-model="selectedValue">
    <option disabled value="">Select an option...</option>
    <option value="apple">Apple</option>
    <option value="banana">Banana</option>
    <option value="orange">Orange</option>
  </select>
  <p>Selected value: {{ selectedValue }}</p>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      selectedValue: '',
    };
  },
}).mount('#form-example-4');
</script>
```
Example 5: Form submission and validation
```html
<div id="form-example-5">
  <form @submit.prevent="submitForm">
    <label>Name:</label>
    <input type="text" v-model="user.name" required /><br />
    
    <label>Email:</label>
    <input type="email" v-model="user.email" required /><br />

    <button type="submit">Submit</button>
  </form>

  <p v-if="submitted && !isValid">Please correct errors before submitting.</p>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      user: {
        name: '',
        email: '',
      },
      submitted: false,
      isValid: true,
    };
  },
  methods: {
    submitForm() {
      if (!this.validate()) {
        return;
      }

      this.submitted = true;
      console.log("Submitted:", this.user);
    },
    validate() {
      const fields = ['name', 'email'];
      let valid = true;
      
      fields.forEach((field) => {
        if (!this[field]) {
          this.$set(this, `${field}_error`, "This field cannot be empty.");
          valid = false;
        } else if (field === 'email' && !this.validEmail(this.email)) {
          this.$set(this, `${field}_error`, "Invalid email format.");
          valid = false;
        } else {
          this.$delete(this, `${field}_error`);
        }
      });

      this.isValid = valid;
      return valid;
    },
    validEmail(value) {
      const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(value).toLowerCase());
    },
  },
}).mount('#form-example-5');
</script>
```